// Code generated by MockGen. DO NOT EDIT.
// Source: storer.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/jackc/pgx/v4"
	grpcapi "github.com/vaidik-bajpai/D-Scheduler/common/grpcapi"
)

// Mockstorer is a mock of storer interface.
type Mockstorer struct {
	ctrl     *gomock.Controller
	recorder *MockstorerMockRecorder
}

// MockstorerMockRecorder is the mock recorder for Mockstorer.
type MockstorerMockRecorder struct {
	mock *Mockstorer
}

// NewMockstorer creates a new mock instance.
func NewMockstorer(ctrl *gomock.Controller) *Mockstorer {
	mock := &Mockstorer{ctrl: ctrl}
	mock.recorder = &MockstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorer) EXPECT() *MockstorerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockstorer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockstorerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockstorer)(nil).Close))
}

// getScheduledTasksFromDB mocks base method.
func (m *Mockstorer) getScheduledTasksFromDB(ctx context.Context, tx v4.Tx) ([]*grpcapi.TaskRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getScheduledTasksFromDB", ctx, tx)
	ret0, _ := ret[0].([]*grpcapi.TaskRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getScheduledTasksFromDB indicates an expected call of getScheduledTasksFromDB.
func (mr *MockstorerMockRecorder) getScheduledTasksFromDB(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getScheduledTasksFromDB", reflect.TypeOf((*Mockstorer)(nil).getScheduledTasksFromDB), ctx, tx)
}

// updatePickedAtStatus mocks base method.
func (m *Mockstorer) updatePickedAtStatus(ctx context.Context, tx v4.Tx, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updatePickedAtStatus", ctx, tx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// updatePickedAtStatus indicates an expected call of updatePickedAtStatus.
func (mr *MockstorerMockRecorder) updatePickedAtStatus(ctx, tx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePickedAtStatus", reflect.TypeOf((*Mockstorer)(nil).updatePickedAtStatus), ctx, tx, taskID)
}

// updateTaskStatus mocks base method.
func (m *Mockstorer) updateTaskStatus(ctx context.Context, updateTask *UpdateTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateTaskStatus", ctx, updateTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateTaskStatus indicates an expected call of updateTaskStatus.
func (mr *MockstorerMockRecorder) updateTaskStatus(ctx, updateTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateTaskStatus", reflect.TypeOf((*Mockstorer)(nil).updateTaskStatus), ctx, updateTask)
}

// withTransaction mocks base method.
func (m *Mockstorer) withTransaction(arg0 context.Context, arg1 func(v4.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "withTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// withTransaction indicates an expected call of withTransaction.
func (mr *MockstorerMockRecorder) withTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "withTransaction", reflect.TypeOf((*Mockstorer)(nil).withTransaction), arg0, arg1)
}

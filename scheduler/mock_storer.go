// Code generated by MockGen. DO NOT EDIT.
// Source: storer.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorer is a mock of storer interface.
type Mockstorer struct {
	ctrl     *gomock.Controller
	recorder *MockstorerMockRecorder
}

// MockstorerMockRecorder is the mock recorder for Mockstorer.
type MockstorerMockRecorder struct {
	mock *Mockstorer
}

// NewMockstorer creates a new mock instance.
func NewMockstorer(ctrl *gomock.Controller) *Mockstorer {
	mock := &Mockstorer{ctrl: ctrl}
	mock.recorder = &MockstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorer) EXPECT() *MockstorerMockRecorder {
	return m.recorder
}

// getTaskFromDB mocks base method.
func (m *Mockstorer) getTaskFromDB(ctx context.Context, taskID string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTaskFromDB", ctx, taskID)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTaskFromDB indicates an expected call of getTaskFromDB.
func (mr *MockstorerMockRecorder) getTaskFromDB(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTaskFromDB", reflect.TypeOf((*Mockstorer)(nil).getTaskFromDB), ctx, taskID)
}

// insertTaskIntoDB mocks base method.
func (m *Mockstorer) insertTaskIntoDB(ctx context.Context, task *CommandRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertTaskIntoDB", ctx, task)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// insertTaskIntoDB indicates an expected call of insertTaskIntoDB.
func (mr *MockstorerMockRecorder) insertTaskIntoDB(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertTaskIntoDB", reflect.TypeOf((*Mockstorer)(nil).insertTaskIntoDB), ctx, task)
}
